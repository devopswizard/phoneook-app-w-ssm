AWSTemplateFormatVersion: 2010-09-09
Description: |
  CloudFormation Template for Phonebook Application. This template creates Application Load Balancer with Auto Scaling Group of Amazon Linux 2023  EC2 Instances which host Python Flask Web Application.EC2 instances are placed within WebServerSecurityGroup which allows http (80) connections only from ALBSecurityGroup,and allows tcp(3306) connections only within itself. RDS DB instance is placed within WebServerSecurityGroup so that Database Server can communicate with Web Servers. Application Load Balancer is placed within ALBSecurityGroup which allows http (80) and SSH (22)connections from anywhere. WebServerASG Auto Scaling Group is using the LT Launch Template in order to spin up instances needed. LT Launch Template is configured to prepare Python Flask environment on EC2, and to deploy Phonebook Application on Flask Server after downloading the app code from Github repository. RDS credentials are located in parameter store and fetch by boto3 in .py file.
  
Parameters:

  MyVPC:
    Description: VPC Id of your existing account
    Type: AWS::EC2::VPC::Id

  Subnets:
    Description: Please select your subnets used by ALB
    Type: List<AWS::EC2::Subnet::Id>

  KeyName:
    Description: Please enter your Key pair
    Type: AWS::EC2::KeyPair::KeyName
    Default: devopswizard

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
  
  MyDbusername: 
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/temelkarabacak/phonebook/username'

Resources:

  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 2
      HealthCheckGracePeriod: 90
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref LT
        Version: !GetAtt LT.LatestVersionNumber
      MaxSize: 3
      MinSize: 1
      TargetGroupARNs: 
        - !Ref TG
      VPCZoneIdentifier: !Ref Subnets

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref TG
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups: 
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets: !Ref Subnets
      Type: application

  LT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        IamInstanceProfile: 
          Name: !Ref MyInstanceProfile
        SecurityGroupIds:
          - !GetAtt WebServerSecurityGroup.GroupId
        TagSpecifications:
          - ResourceType: instance
            Tags:
            - Key: Name
              Value: !Sub Web Server of ${AWS::StackName}
        UserData:
          Fn::Base64: 
            !Sub
              - |
                #! /bin/bash -x
                dnf update -y 
                dnf instaal python3 -y 
                dnf install python-pip -y 
                dnf install git -y 
                pip3 install Flask==2.3.3
                pip3 install Flask-MySql 
                pip3 install boto3 
                echo "${MyDBURI}" > /home/ec2-user/dbserver.endpoint
                cd /home/ec2-user
                TOKEN=$(aws --region=us-east-1 ssm get-parameter --name /temelkarabacak/phonebook/token --with-decryption --query 'Parameter.Value' --output text)
                git clone https://$TOKEN@github.com/awsdevopsteam/phonebook-web-app.git

              - MyDBURI: !GetAtt DBInstance.Endpoint.Address
  
Outputs: